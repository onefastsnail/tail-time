// Code generated by MockGen. DO NOT EDIT.
// Source: s3.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	s3 "github.com/aws/aws-sdk-go-v2/service/s3"
	gomock "github.com/golang/mock/gomock"
)

// MockGetObjectAPI is a mock of GetObjectAPI interface.
type MockGetObjectAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGetObjectAPIMockRecorder
}

// MockGetObjectAPIMockRecorder is the mock recorder for MockGetObjectAPI.
type MockGetObjectAPIMockRecorder struct {
	mock *MockGetObjectAPI
}

// NewMockGetObjectAPI creates a new mock instance.
func NewMockGetObjectAPI(ctrl *gomock.Controller) *MockGetObjectAPI {
	mock := &MockGetObjectAPI{ctrl: ctrl}
	mock.recorder = &MockGetObjectAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetObjectAPI) EXPECT() *MockGetObjectAPIMockRecorder {
	return m.recorder
}

// GetObject mocks base method.
func (m *MockGetObjectAPI) GetObject(ctx context.Context, params *s3.GetObjectInput, optFns ...func(*s3.Options)) (*s3.GetObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObject", varargs...)
	ret0, _ := ret[0].(*s3.GetObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockGetObjectAPIMockRecorder) GetObject(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockGetObjectAPI)(nil).GetObject), varargs...)
}
